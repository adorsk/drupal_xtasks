<?php

define('EXTERNAL_TASKS_UPDATE_EP', 'external_tasks/update_task');

/**
 * Implements hook_menu().
 */
function external_tasks_menu(){
  $items[EXTERNAL_TASKS_UPDATE_EP] = array(
    'title' => 'External Tasks Update Task Endpoint',
    'access callback' => TRUE,
    'page callback' => 'external_tasks_update_task_ep',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_node_info().
 */
function external_tasks_node_info(){
  return array(
    'external_task' => array(
      'name' => t('External Task'),
      'base' => 'external_task',
      'description' => t('An external task. Contains metadata for running the task, and the state of the task.'),
    )
  );
}

/**
 * Handles result of post to update task endpoint.
 * $task_token is an access token corresponding to
 * a specific task. The token is the method of access
 * control. The token is generated when a task is created.
 */
function external_tasks_update_task_ep($token){
  if (! $token){
    return MENU_NOT_FOUND;
  }

  // Get task corresponding to token.
  $token_record = db_query(
    "SELECT token, nid FROM {external_tasks_tokens} WHERE token = :token",
    array(':token' => $token))->fetchObject();

  if (! $token_record){
    return MENU_NOT_FOUND;
  }

  // Parse posted data.
  // Parse posted data.
  $json_data = file_get_contents("php://input");
  $data = json_decode($json_data, true);

  // Update task with posted data.
  $node = node_load($token_record->nid);
  if (! $node){
    return MENU_NOT_FOUND;
  }
  $field_attrs = array('status', 'data');
  foreach($field_attrs as $field_attr){
    if (array_key_exists($field_attr, $data)){
      $node->{"external_task_$field_attr"} = array(
        LANGUAGE_NONE => array(
          array('value' => $data[$field_attr])
        )
      );
    }
  }
  node_save($node);

  drupal_json_output(array('foo' => 'bar'));
  drupal_exit();
}

/**
 * Implements hook_insert().
 * Creates access token for task.
 */
function external_task_insert($node){
  $token = uniqid('task' . $node->nid);
  db_insert('external_tasks_tokens') ->fields(array(
    'token' => $token,
    'nid' => $node->nid
  ))->execute();

  $node->external_task_token['und'][0]['value'] = $token;
}

/**
 * Implements hook_form().
 */
function external_task_form($node, $form_state){
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter().
 *
 * Hides the token field.
 */
function external_tasks_form_external_task_node_form_alter(&$form, $form_state, $form_id) {
  unset($form['external_task_token']);
}

/**
 * Runs a task.
 */
function external_tasks_run_task($nid){
  $node = node_load($nid);
  if (! $node){
    // HANDLE ERROR HERE.
  }

  // Get array representation of task.
  $task = external_tasks_task_to_array($node);

  // Get command from task config.
  $cmd = $task['config']['command'];

  // Run the command and pass it the task as a JSON string via stdin.
  $json_task = json_encode($task);
  $proc = proc_open($cmd, array(array("pipe", "r")), $pipes);
  if (is_resource($proc)){
    fwrite($pipes[0], $json_task);
    fclose($pipes[0]);
    $ret = proc_close($proc);
    if ($ret != 0){
      // HANDLE ERROR.
    }
  }
  else{
    // HANDLE ERROR.
  }

}

/**
 * Get an array representing a task.
 */
function external_tasks_task_to_array($node){
  $task_array = array();
  $task_attrs = array('data', 'status', 'config');
  foreach ($task_attrs as $task_attr){
    $field = $node->{"external_task_$task_attr"};
    $value = $field[LANGUAGE_NONE][0]['value'];
    if ($value){
      $value = json_decode($value, true);
    }
    else{
      $value = array();
    }
    $task_array[$task_attr] = $value;
  }
  // Add update endpoint to config.
  $token = $node->external_task_token[LANGUAGE_NONE][0]['value'];
  $task_array['config']['update_endpoint'] = url(
    EXTERNAL_TASKS_UPDATE_EP . "/$token", array('absolute' => TRUE));
  return $task_array;
}
