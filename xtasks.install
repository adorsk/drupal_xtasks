<?php

/**
 * @file
 *   xtasks module install hooks.
 */

/**
 * Implements hook_schema().
 */
function xtasks_schema(){
  $schema['xtasks_tokens'] = array(
    'description' => 'Access tokens for xtasks.',
    'fields' => array(
      'token' => array(
        'description' => 'Token string.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE
      ),
      'nid' => array(
        'description' => 'Task Node ID',
        'type' => 'int',
        'not null' => TRUE
      )
    ),
    'primary key' => array('token'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid')
      )
    )
  );

  $schema['xtasks_batch'] = array(
    'description' => 'Batch jobs for tasks.',
    'fields' => array(
      'bid' => array(
        'description' => 'Batch id.',
        'type' => 'int',
        'not null' => TRUE
      ),
      'nid' => array(
        'description' => 'Task Node ID',
        'type' => 'int',
        'not null' => TRUE
      )
    ),
    'primary key' => array('bid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid')
      ),
      'batch' => array(
        'table' => 'batch',
        'columns' => array('bid' => 'bid')
      )
    )
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function xtasks_install() {
  // Pointer to translation function.
  $t = get_t();

  // Update node types.
  node_types_rebuild();
  $types = node_type_get_types();

  // Create all the fields we are adding to our content type.
  $fields = _xtasks_fields();
  foreach ($fields as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  $field_instances = array();
  foreach ($fields as $field_id => $field) {
    $field_instances[$field_id] = array(
      'field_name' => $field_id,
      'label' => $t($field_id),
      'widget' => array(
        'type' => 'text_textarea'
      ),
    );
  }

  foreach ($field_instances as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'xtask';
    field_create_instance($instance);
  }
}

/**
 * Define fields.
 */
function _xtasks_fields(){
  return array(
    // Token field.
    'xtasks_token' => array(
      'field_name' => 'xtasks_token',
      'cardinality' => 1,
      'type' => 'text',
      'locked' => TRUE,
    ),
    // Config field.
    'xtasks_config' => array(
      'field_name' => 'xtasks_config',
      'cardinality' => 1,
      'type' => 'text',
    ),
    // Data field.
    'xtasks_data' => array(
      'field_name' => 'xtasks_data',
      'cardinality' => 1,
      'type' => 'text',
    ),
    // Status field.
    'xtasks_status' => array(
      'field_name' => 'xtasks_status',
      'cardinality' => 1,
      'type' => 'text',
    ),
    // Message field.
    'xtasks_message' => array(
      'field_name' => 'xtasks_message',
      'cardinality' => 1,
      'type' => 'text',
    ),

    // Progress field.
    'xtasks_progress' => array(
      'field_name' => 'xtasks_progress',
      'cardinality' => 1,
      'type' => 'text',
    ),

    // Callback field.
    // @TODO: put this in config!
    'xtasks_callback' => array(
      'field_name' => 'xtasks_callback',
      'cardinality' => 1,
      'type' => 'text',
    ),

    // Errors field.
    'xtasks_errors' => array(
      'field_name' => 'xtasks_errors',
      'cardinality' => 1,
      'type' => 'text',
    ),
  );
}

/**
 * Implements hook_uninstall().
 */
function xtasks_uninstall() {
  // Delete all tasks that might have been created while this
  // module was enabled.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'xtask'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_xtasks_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the 
  // xtask content type and delete them individually.
  $instances = field_info_instances('node', 'xtask');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  node_type_delete('xtask');

  // Purge all field infromation
  field_purge_batch(1000);
}
