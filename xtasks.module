<?php

define('XTASKS_UPDATE_EP', 'xtasks/update_task');
define('XTASKS_STATUS_EP', 'xtasks/task_status');

/**
 * Implements hook_menu().
 */
function xtasks_menu(){
  $items[XTASKS_UPDATE_EP] = array(
    'title' => 'XTasks Update Endpoint',
    'access callback' => TRUE,
    'page callback' => 'xtasks_update_task_ep',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items[XTASKS_STATUS_EP] = array(
    'title' => 'XTasks Task Status',
    'access callback' => TRUE, // @TODO! CHANGE THIS LATER...
    'page callback' => '_xtasks_task_status_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_node_info().
 */
function xtasks_node_info(){
  return array(
    'xtask' => array(
      'name' => t('XTask'),
      'base' => 'xtask',
      'description' => t('An external task. Contains metadata for running the task, and the state of the task.'),
    )
  );
}

/**
 * Handles result of post to update task endpoint.
 * $task_token is an access token corresponding to
 * a specific task. The token is the method of access
 * control. The token is generated when a task is created.
 */
function xtasks_update_task_ep($token){
  if (! $token){
    return MENU_NOT_FOUND;
  }

  // Get task corresponding to token.
  $token_record = db_query(
    "SELECT token, nid FROM {xtasks_tokens} WHERE token = :token",
    array(':token' => $token))->fetchObject();

  if (! $token_record){
    return MENU_NOT_FOUND;
  }

  // Parse posted data.
  try{
    $json_data = file_get_contents("php://input");
    $data = json_decode($json_data, true);
  }
  catch (Exception $e){
    // Do 400 Error here.
  }

  // Load task node.
  $node = node_load($token_record->nid);
  if (! $node){
    return MENU_NOT_FOUND;
  }

  // Update task with posted data.
  $field_attrs = _xtasks_task_attrs();
  foreach($field_attrs as $field_attr){
    if (array_key_exists($field_attr, $data)){
      $value = is_string($data[$field_attr]) ? $data[$field_attr] : json_encode($data[$field_attr]);
      $node->{"xtasks_$field_attr"} = array(
        LANGUAGE_NONE => array(
          array('value' => $value)
        )
      );
    }
  }

  // If task status is resolved or rejected, remove token
  // and call appropriate callback if given.
  $status = $node->xtasks_status[LANGUAGE_NONE][0]['value'];
  if ($status == 'completed' || $status == 'failed'){
    db_delete('xtasks_tokens')
      ->condition('token', $token)
      ->execute();
    unset($node->xtasks_token[LANGUAGE_NONE][0]['value']);

    $callback_field = $node->{"xtasks_" . $status . "_callback"};
    if ($callback_field){
      $callback = $callback_field[LANGUAGE_NONE][0]['value'];
      if ($callback){
        $callback($node);
      }
    }
  }

  node_save($node);

  drupal_json_output(array());
  drupal_exit();
}

/**
 * Implements hook_insert().
 * Creates access token for task.
 */
function xtask_insert($node){
  $token = uniqid('task' . $node->nid);
  db_insert('xtasks_tokens') ->fields(array(
    'token' => $token,
    'nid' => $node->nid
  ))->execute();

  $node->xtasks_token['und'][0]['value'] = $token;
}

/**
 * Implements hook_form().
 */
function xtask_form($node, $form_state){
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter().
 *
 * Hides the token field.
 */
function xtasks_form_xtasks_node_form_alter(&$form, $form_state, $form_id) {
  unset($form['xtasks_token']);
}

/**
 * Runs a task.
 */
function xtasks_run_task($nid, $debug=FALSE){
  $node = node_load($nid);
  if (! $node){
    // HANDLE ERROR HERE.
  }

  // Get array representation of task.
  $task_array = xtasks_task_to_array($node);

  // Get command from task config.
  $cmd = $task_array['config']['command'];

  // Run the command and pass it the task as a JSON string via stdin.
  $json_task = json_encode($task_array);
  try {
    $descriptorspec = array(
      array("pipe", "r"), // STDIN
      array("pipe", "w"), // STDOUT
      array("pipe", "w"), // STDERR
    );
    $proc = proc_open($cmd, $descriptorspec, $pipes);

    if (is_resource($proc)){
      fwrite($pipes[0], $json_task);
      fclose($pipes[0]);
      $stdout = stream_get_contents($pipes[1]);
      fclose($pipes[1]);
      $stderr = stream_get_contents($pipes[2]);
      fclose($pipes[2]);
      $ret = proc_close($proc);
      if ($ret != 0){
        throw new Exception("Error starting task, stderr was '$stderr'");
      }
    }
    else{
      throw new Exception("Could not run command '$cmd'");
    }
  }
  catch (Exception $e){
    if ($debug){
      error_log("err is: " . $e->getMessage());
    }
    $node->xtasks_status[LANGUAGE_NONE][0]['value'] = 'rejected';
    $node->xtasks_errors[LANGUAGE_NONE][0]['value'] = json_encode(array($e->getMessage()));
    node_save($node);
  }
}

/**
 * Define list of task attributes.
 */
function _xtasks_task_attrs(){
  return array('message', 'data', 'status', 'config', 'errors', 'progress', 'completed_callback', 'failed_callback', 'status_callback');
}

/**
 * Get an array representing a task.
 */
function xtasks_task_to_array($node){
  $task_array = array();
  $task_attrs = _xtasks_task_attrs();
  foreach ($task_attrs as $task_attr){
    $value = null;
    $field = $node->{"xtasks_$task_attr"};
    if (isset($field[LANGUAGE_NONE][0]['value'])){
      $raw_value = $field[LANGUAGE_NONE][0]['value'];
      $value = json_decode($raw_value, true);
      if (is_null($value)){
        $value = $raw_value;
      }
    }
    $task_array[$task_attr] = $value;
  }
  // Add update endpoint to config.
  $token = $node->xtasks_token[LANGUAGE_NONE][0]['value'];
  $task_array['config']['update_url'] = url(
    XTASKS_UPDATE_EP . "/$token", array('absolute' => TRUE));

  // Add task id.
  $task_array['id'] = $node->nid;

  return $task_array;
}

function xtasks_array_to_task($array){
  $node = new stdClass();
  $node->type = 'xtask';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;

  //$node->title = $task_def['title'];
  $node->title = 'Task Title';

  $task_attrs = _xtasks_task_attrs();
  foreach ($task_attrs as $task_attr){
    if (isset($array[$task_attr])){
      $value = $array[$task_attr];
      if (is_array($value)){
        $value = json_encode($value);
      }
      $node->{"xtasks_$task_attr"}[LANGUAGE_NONE][0]['value'] = $value;
    }
  }

  node_save($node);

  return $node;
}

/**
 * View status of a task.
 */
function _xtasks_task_status_page($nid){
  $node = node_load($nid);
  if (! $node){
    return MENU_NOT_FOUND;
  }

  $task_array = xtasks_task_to_array($node);
  $status = $task_array['status'];
  $progress = $task_array['progress'];

  if ($status == 'resolved' || $status == 'rejected' || $progress >= 100){
      $callback = _xtasks_get_status_callback($node);
      return $callback($node);
  }
  else{
    // Get or create batch job for monitoring the task.
    $batch_record = db_query(
    "SELECT bid, nid FROM {xtasks_batch} WHERE nid= :nid",
    array(':nid' => $nid))->fetchObject();

    $bid = null;
    if (empty($batch_record)){
      // Initialize operations w/ init op.
      $operations = array(
        array('_xtasks_monitor_batch_init', array($nid)),
      );
      // Add operations to represent completion for 1-100%.
      // This is a trick to report on task progress.
      for ($i = 1; $i < 100; $i++){
        $operations[] = array('_xtasks_monitor_batch_op', array($i));
      }

      $batch_def = array(
        'operations' => $operations,
        'finished' => '_xtasks_monitor_batch_finished',
      );
      batch_set($batch_def);
      $batch = batch_get();
      batch_process();
      return;
    }
    else{
      $bid = $batch_record->bid;
    }
    drupal_goto('batch', array(
      'query' => array(
        'op' => 'start',
        'id' => $batch_record->bid
      )));
    return;
  }
}

function _xtasks_get_status_callback($node){
  $callback = null;
  $field = $node->xtasks_status_callback;
  if ($field){
    $callback = $field[LANGUAGE_NONE][0]['value'];
  }
  if (! $callback){
    $callback = 'xtasks_task_status_default_finished_page';
  }
  return $callback;
}

function _xtasks_monitor_batch_init($nid, &$context){
  $batch = batch_get();

  db_insert('xtasks_batch') ->fields(array(
    'bid' => $batch['id'],
    'nid' => $nid
  ))->execute();

  $context['results']['bid'] = $batch['id'];
  $context['message'] = 'Started task monitoring...';
  $context['results']['task_nid'] = $nid;
  $context['finished'] = 1;
}

function _xtasks_monitor_batch_op($op_progress, &$context){
  // Get task data.
  $nid = $context['results']['task_nid'];
  $node = node_load($nid);
  if (! $node){
    throw new Exception("Could not load task with id '$nid'");
  }

  $task_array = xtasks_task_to_array($node);

  $task_progress = $task_array['progress'];
  $status = $task_array['status'];
  $message = $task_array['message'];

  if (! $task_progress){
    $task_progress = 0;
    if (! $message){
      $message = t("Waiting for task to begin...");
    }
  }

  if (! is_numeric($task_progress)){
    throw new Exception("Invalid value for task progress. Value was '$task_progress'");
  }

  // Skip to the end if resolved or rejected.
  if ($status == 'resolved' || $status == 'rejected'){
    $node->xtasks_progress[LANGUAGE_NONE][0]['value'] = 100;
  }

  if ($op_progress < $task_progress){

    // If skipping, return w/out setting message.
    $skipping = isset($context['results']['skip']) ? $context['results']['skip'] : FALSE;
    if ($skipping){
      $context['finished'] = 1;
      return;
    }
    else{
      $context['results']['skip'] = TRUE;
      $cur_progress = $op_progress;
      while ($cur_progress < $task_progress){
        list($progress, $message) = _batch_process();
        $cur_progress = $progress;
      }
      $context['results']['skip'] = FALSE;
    }
  }

  // Wait for task to catch up before moving to next op.
  // Set message.
  $context['message'] = $message;
  $context['finished'] = 0;
}

function _xtasks_monitor_batch_finished($success, $results, $ops){
  $nid = $results['task_nid'];
  $node = node_load($nid);

  // Remove xtask_batch record
  db_delete('xtasks_batch')
      ->condition('bid', $results['bid'])
      ->execute();

  if (! $success){
    // HANDLE ERROR HERE.
  }

  drupal_goto(XTASKS_STATUS_EP . "/$nid");
}

function xtasks_task_status_default_finished_page($node){
  $task_array = xtasks_task_to_array($node);

  $message_type = "status";

  if ($task_array['status'] == 'rejected'){
    drupal_set_message("There were errors during task execution", 'error');
    foreach ($task_array['errors'] as $error){
      drupal_set_message($error, 'error');
    }
    $message_type = "error";
    $message_text = t("There were errors during task execution."); 
  }
  else{
    drupal_set_message("Task completed successfully.");
    foreach ($task_array['errors'] as $error){
      drupal_set_message($error, 'warning');
    }
  }
  return '';
}

function _xtasks_task_status_show_task_errors($node){
  $task_array = xtasks_task_to_array($node);
}

/**
 * Get url for task's status page.
 */
function xtasks_url_for_task_status_page($nid, $options = array()){
  return url(XTASKS_STATUS_EP . '/' . $nid, $options);
}

